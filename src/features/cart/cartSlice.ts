import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { Product } from "utils/models";
import { RootState } from "../../app/store";
import { fetchCount } from "../counter/counterAPI";

export interface CartState {
  value: number;
  cartProducts: Product[];
  status: "idle" | "loading" | "failed";
}

const initialState: CartState = {
  value: 0,
  cartProducts: [],
  status: "idle",
};

export const incrementAsync = createAsyncThunk(
  "cart/fetchCart",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addProducToCart: (state, action: PayloadAction<Product>) => {
      state.cartProducts.push(action.payload);
    },
    removeProductFromCart: (state, action: PayloadAction<number>) => {
      const idToRemove = action.payload;
      const cartProductsFiltered = state.cartProducts.filter(
        (item) => item.id !== idToRemove
      );
      state.cartProducts = cartProductsFiltered;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

export const { removeProductFromCart, addProducToCart } = cartSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCart = (state: RootState) => state.cart.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/*export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCart(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };*/

export default cartSlice.reducer;
